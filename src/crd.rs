use k8s_openapi::api::apps::v1::Deployment;
use k8s_openapi::api::core::v1::PodTemplate;
use kube::CustomResource;
use kube::{api::ListParams, client::Client, core::WatchEvent, Api};
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use std::collections::BTreeMap;

/// Struct corresponding to the Specification (`spec`) part of the `DeploymentHook` resource,
/// directly reflects context of the `deploymenthooks.apps.mx.com.yaml` file to be found in
/// this repository.
/// The `DeploymentHook` struct will be generated by the `CustomResource` derive macro.
#[derive(CustomResource, Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[serde(rename_all = "camelCase")]
#[kube(
    group = "apps.mx.com",
    version = "v1",
    kind = "DeploymentHook",
    plural = "deploymenthooks",
    derive = "PartialEq",
    namespaced
)]
pub struct DeploymentHookSpec {
    pub debounce_seconds: u64,
    pub selector: DeploymentSelector,
    pub template: InternalPodTemplate,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
pub struct DeploymentSelector {
    pub labels: BTreeMap<String, String>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
pub struct InternalPodTemplate {
    pub name: String,
}

impl DeploymentHook {
    pub async fn get_pod_template(
        &self,
        client: Client,
    ) -> Result<PodTemplate, Box<dyn std::error::Error>> {
        let pod_template_api: Api<PodTemplate> = Api::namespaced(
            client,
            &self
                .metadata
                .namespace
                .clone()
                .unwrap_or_else(|| "default".to_string()),
        );

        Ok(pod_template_api.get(&self.spec.template.name).await?)
    }

    pub fn does_match_deployment(&self, deployment: &Deployment) -> bool {
        if let Some(ref labels) = deployment.metadata.labels {
            self.spec
                .selector
                .labels
                .iter()
                .all(|hook_label| labels.get_key_value(hook_label.0) == Some(hook_label))
        } else {
            false
        }
    }
}
